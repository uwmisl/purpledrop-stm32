#!/usr/bin/env python3
# -*- coding: utf-8 -*-

class Instance(Module):
    def __init__(self, instance):
        self.instance = instance

    def init(self, module):
        module.name = str(self.instance)
        module.description = "Instance {}".format(self.instance)

    def prepare(self, module, options):
        return True

    def build(self, env):
        device = env[":target"]
        driver = device.get_driver("i2c")

        properties = device.properties
        properties["target"] = target = device.identifier
        properties["id"] = self.instance

        env.substitutions = properties
        env.outbasepath = "templated"

        env.template("i2c_master.cpp.in", "i2c_master_{}.cpp".format(self.instance))
        env.template("i2c_master.hpp.in", "i2c_master_{}.hpp".format(self.instance))

def init(module):
    module.name = ":i2c"
    module.description = "Inter-Integrated Circuit (IÂ²C)"

def prepare(module, options):
    device = options[":target"]
    if not device.has_driver("twi"):
        return False

    module.depends(
        "modm:architecture:accessor",
        "modm:math:algorithm",
        "modm:cmsis:device",
        "modm:platform:gpio")

    for instance in listify(device.get_driver("twi")["instance"]):
        module.add_submodule(Instance(int(instance)))

    return True

def build(env):
    pass
