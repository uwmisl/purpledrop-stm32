#include <i2c_master_{{ id }}.hpp>

namespace purpledrop {

bool
I2cMaster{{ id }}::write(uint8_t address, uint8_t* txbuf, uint32_t length) {
    // Setup write mode and set device address
    TWI{{ id }}->TWI_MMR = TWI_MMR_DADR(address);
    while(length > 0) {
        TWI{{ id }}->TWI_THR = *txbuf;
        txbuf++;
        length--;
        while(true) {
            uint32_t sr = TWI{{ id }}->TWI_SR;
            if(sr & TWI_SR_NACK) {
                return false;
            }
            if(sr & TWI_SR_TXRDY) {
                break;
            }
        }
    }
    TWI{{ id }}->TWI_CR = TWI_CR_STOP;
    while(!(TWI{{ id }}->TWI_SR & TWI_SR_TXCOMP));
    return true;
}

uint32_t
I2cMaster{{ id }}::read(uint8_t dev_addr, uint8_t reg_addr, uint8_t* rxbuf, uint32_t length) {
    // Setup write mode and set device address
    TWI{{ id }}->TWI_MMR = TWI_MMR_DADR(dev_addr);
    TWI{{ id }}->TWI_THR = reg_addr;
    while(true) {
        uint32_t sr = TWI{{ id }}->TWI_SR;
        if(sr & TWI_SR_NACK) {
            return false;
        }
        if(sr & TWI_SR_TXRDY) {
            break;
        }
    }
    // Setup read mode
    TWI{{ id }}->TWI_MMR = TWI_MMR_DADR(dev_addr) | TWI_MMR_MREAD;
    if(length == 1) {
        TWI{{ id }}->TWI_CR = TWI_CR_START | TWI_CR_STOP;
    } else {
        TWI{{ id }}->TWI_CR = TWI_CR_START;
    }
    while(length > 0) {
        while(!(TWI{{ id }}->TWI_SR & TWI_SR_RXRDY));

        length--;
        // Set stop after receiving next-to-last byte
        if(length == 1) {
            TWI{{ id }}->TWI_CR = TWI_CR_STOP;
        }
        // Reading RHR will initiate transfer of next byte, unless we set the
        // STOP bit above
        *rxbuf++ = TWI{{ id }}->TWI_RHR;
    }
    return true;
}

} // namespace purpledrop
